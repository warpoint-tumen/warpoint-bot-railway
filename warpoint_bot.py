
import os
import json
import firebase_admin
from firebase_admin import credentials, firestore
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# Firebase setup
cred = credentials.Certificate("warpointbot-firebase-adminsdk-fbsvc-4977f09b54.json")
firebase_admin.initialize_app(cred)
db = firestore.client()
TASKS_COLLECTION = "tasks"

TOKEN = os.getenv("TOKEN")

def fetch_tasks():
    docs = db.collection(TASKS_COLLECTION).stream()
    return {doc.id: doc.to_dict().get("status", "–Ω–µ –Ω–∞—á–∞—Ç–æ") for doc in docs}

def add_task(text, status="–Ω–µ –Ω–∞—á–∞—Ç–æ"):
    db.collection(TASKS_COLLECTION).document(text).set({"status": status})

def update_task_status(task_text, status):
    db.collection(TASKS_COLLECTION).document(task_text).update({"status": status})

def format_task_list(tasks):
    if not tasks:
        return "–ù–µ—Ç –∑–∞–¥–∞—á."
    return "\n".join([f"{i}. {task} ‚Äî [{status}]" for i, (task, status) in enumerate(tasks.items(), 1)])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìã –ó–∞–¥–∞—á–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¢—É–º—ç–Ω –ë–∞—è—Ä–æ–≤–∏—á! –Ø —á–∏—Ç–∞—é –∑–∞–¥–∞—á–∏ –∏–∑ Firebase üß†", reply_markup=markup)

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = fetch_tasks()
    await update.message.reply_text(format_task_list(tasks))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()

    if msg == "üìã –ó–∞–¥–∞—á–∏":
        await list_tasks(update, context)
        return

    if msg == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /–¥–æ–±–∞–≤–∏—Ç—å –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
        return

    if msg.startswith("/–¥–æ–±–∞–≤–∏—Ç—å "):
        text = msg.replace("/–¥–æ–±–∞–≤–∏—Ç—å ", "").strip()
        if text:
            add_task(text)
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}")
        return

    if "-" in msg:
        try:
            num, action = msg.split("-")
            num = int(num.strip())
            action = action.strip().lower()
            tasks = list(fetch_tasks().items())
            key = tasks[num - 1][0]
            if "–Ω–∞—á–∞–ª" in action:
                update_task_status(key, "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            elif "–≥–æ—Ç–æ–≤–æ" in action:
                update_task_status(key, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            elif "–ø–µ—Ä–µ–Ω–æ—Å" in action:
                update_task_status(key, "–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
            await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {key}")
        except:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
        return

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_error_handler(error)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Firebase...")
    app.run_polling()

if __name__ == "__main__":
    main()
